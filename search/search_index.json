{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#adl-ros2-documentation","title":"ADL ROS2 Documentation","text":"<p>Welcome to the Applied Dynamics Lab ROS2 documentation!  This guide covers all the ROS2 packages developed by the McGill Applied Dynamics Lab for robotic systems,  particularly focusing on the Franka Research 3 and teleoperation.</p>"},{"location":"#overview","title":"Overview","text":"<p>The ADL ROS2 ecosystem consists of several packages:</p> <ul> <li>Robot Arm: Complete robot arm control system including interfaces, controllers, and bringup</li> <li>Robot Tasks: Task execution framework with reinforcement learning capabilities</li> <li>Teleop: Teleoperation system for remote robot control</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Getting Started: Check out the getting started guide</li> <li>Installation: For steps on how to setup the robots and PCs, follow the installation guide</li> <li>Examples: Explore the tutorials (To Come...)</li> </ol>"},{"location":"#user-guides","title":"User Guides","text":"<p>Documentation and user guides of each packages.</p> <ul> <li>Installation</li> <li>Getting Started</li> <li>Franka Server</li> <li>Experiments</li> <li>DelayRIM</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83e\uddbe Robot Arm Control: Complete control stack for Franka FR3 robot</li> <li>\ud83e\udd16 RL Integration: Reinforcement learning task execution</li> <li>\ud83c\udfae Teleoperation: Teleoperation of the arm with the Inverse3 and Joystick</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<p>It's recommended to use the Docker container for installing the packages. </p> <p>If you prefer to install locally:</p> <ul> <li>Ubuntu 22.04 LTS</li> <li>ROS2 Humble</li> <li>Python 3.10+</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udcd6 Documentation</li> <li>\ud83d\udc1b Issues: GitHub Issues</li> </ul> <p>Made by the McGill Applied Dynamics Lab</p>"},{"location":"packages/adg-ros2-utils/","title":"ADG ROS2 Utils","text":"<p>Core utilities and debugging tools for the ADG ROS2 ecosystem.</p> <p>For now, mainly for remote debugging of ROS2 nodes</p>"},{"location":"packages/adg-ros2-utils/#package-structure","title":"Package Structure","text":"<pre><code>adg_ros2_utils/\n\u251c\u2500\u2500 adg_ros2_utils/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 debug_utils.py      # Debug utilities and remote debugging\n\u251c\u2500\u2500 package.xml             # Package metadata\n\u251c\u2500\u2500 setup.py               # Python package setup\n\u2514\u2500\u2500 setup.cfg              # Package configuration\n</code></pre>"},{"location":"packages/adg-ros2-utils/#key-components","title":"Key Components","text":""},{"location":"packages/adg-ros2-utils/#debug-utils-debug_utilspy","title":"Debug Utils (<code>debug_utils.py</code>)","text":"<p>Provides debugging utilities for ROS2 nodes, including remote debugging support.</p>"},{"location":"packages/adg-ros2-utils/#functions","title":"Functions","text":"<p>Wait for the debugger to attach. Only wait if the node_name matches the environment variable DEBUG_NODE.</p>"},{"location":"packages/adg-ros2-utils/#usage","title":"Usage","text":""},{"location":"packages/adg-ros2-utils/#remote-debugging","title":"Remote Debugging","text":"<p>To enable remote debugging for a specific node:</p> <pre><code># Set environment variables\nexport DEBUG_NODE=\"your_node_name\"\nexport DEBUG_PORT=5678\n\n# Launch your node\nros2 run your_package your_node\n</code></pre> <p>In your Python code:</p> <pre><code>from adg_ros2_utils.debug_utils import wait_for_debugger\n\ndef main():\n    rclpy.init()\n    node = YourNode()\n\n    # Wait for debugger if this node matches DEBUG_NODE\n    wait_for_debugger(node.get_name())\n\n    rclpy.spin(node)\n    rclpy.shutdown()\n</code></pre>"},{"location":"packages/adg-ros2-utils/#in-a-vscode-launch-configuration","title":"In a VsCode Launch Configuration","text":"<pre><code>{\n    \"configurations\": [\n        {\n                    \"name\": \"Python Debugger: Remote Attach\",\n                    \"type\": \"debugpy\",\n                    \"request\": \"attach\",\n                    \"connect\": {\n                        \"host\": \"localhost\",\n                        \"port\": 5678\n                    },\n                    \"pathMappings\": [\n                        {\n                            \"localRoot\": \"${workspaceFolder}\",\n                            \"remoteRoot\": \".\"\n                        }\n                    ]\n        },\n        {\n                    \"name\": \"Launch: franka_rim.launch.py\",\n                    \"type\": \"debugpy\",\n                    \"request\": \"launch\",\n                    \"program\": \"/opt/ros/humble/bin/ros2\",\n                    \"args\": [\n                        \"launch\",\n                        \"franka_rim\",\n                        \"franka_rim.launch.py\",\n                        \"fake_i3:=false\",\n                        \"save_data:=false\",\n                    ],\n                    \"console\": \"integratedTerminal\",\n                    \"env\": {\n                        \"DEBUG_NODE\": \"franka_rim_node\", // Node name to debug\n                    }\n        },\n    ]\n}\n</code></pre>"},{"location":"packages/arm-client/","title":"Arm Client","text":"<p>Python ros2 wrapper to easily control the arm. </p> <p>Based on crisp_py.</p>"},{"location":"packages/robot-arm/","title":"Robot Arm Package","text":"<p>Complete robot arm control system including interfaces, controllers, and bringup configurations.</p>"},{"location":"packages/robot-arm/#overview","title":"Overview","text":"<p>The Robot Arm package is a comprehensive suite of sub-packages that provide complete robot arm control functionality. It includes everything from low-level controllers to high-level interfaces and simulation support.</p>"},{"location":"packages/robot-arm/#sub-packages","title":"Sub-Packages","text":""},{"location":"packages/robot-arm/#core-interface-packages","title":"Core Interface Packages","text":""},{"location":"packages/robot-arm/#arm_interfaces","title":"<code>arm_interfaces</code>","text":"<p>Message and service definitions specific to robot arm operations.</p> <ul> <li>Purpose: Custom ROS2 messages and services for arm control</li> <li>Language: ROS2 Interface Definition Language (IDL)</li> <li>Key Features: Joint commands, Cartesian commands, status messages</li> </ul>"},{"location":"packages/robot-arm/#robot_arm_interface","title":"<code>robot_arm_interface</code>","text":"<p>High-level interface for robot arm control.</p> <ul> <li>Purpose: Unified interface for different robot arm types</li> <li>Language: Python</li> <li>Key Features: Abstracted control interface, safety monitoring</li> </ul>"},{"location":"packages/robot-arm/#robot_arm_client","title":"<code>robot_arm_client</code>","text":"<p>Client library for interacting with robot arm controllers.</p> <ul> <li>Purpose: Easy-to-use client interface for applications</li> <li>Language: Python</li> <li>Key Features: Simplified API, trajectory planning helpers</li> </ul>"},{"location":"packages/robot-arm/#controller-packages","title":"Controller Packages","text":""},{"location":"packages/robot-arm/#fr3_controllers","title":"<code>fr3_controllers</code>","text":"<p>Specific controllers for the Franka FR3 robot arm.</p> <ul> <li>Purpose: Real-time controllers for FR3 hardware</li> <li>Language: C++</li> <li>Key Features: Joint control, Cartesian control, compliance control</li> </ul>"},{"location":"packages/robot-arm/#franka_rim","title":"<code>franka_rim</code>","text":"<p>Robot-in-the-Middle (RIM) system for Franka robots.</p> <ul> <li>Purpose: Simulation and testing framework</li> <li>Language: Python</li> <li>Key Features: Hardware-in-the-loop testing, delay simulation</li> </ul>"},{"location":"packages/robot-arm/#system-integration","title":"System Integration","text":""},{"location":"packages/robot-arm/#robot_arm_bringup","title":"<code>robot_arm_bringup</code>","text":"<p>Launch files and configuration for complete system startup.</p> <ul> <li>Purpose: System integration and deployment</li> <li>Language: Python (launch files)</li> <li>Key Features: Multi-robot support, configuration management</li> </ul>"},{"location":"packages/robot-arm/#isaac_sim_ros","title":"<code>isaac_sim_ros</code>","text":"<p>Integration with NVIDIA Isaac Sim for advanced simulation.</p> <ul> <li>Purpose: High-fidelity simulation environment</li> <li>Language: Python</li> <li>Key Features: Physics simulation, sensor simulation, RL environment</li> </ul>"},{"location":"packages/robot-arm/#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    A[Applications] --&gt; B[robot_arm_client]\n    B --&gt; C[robot_arm_interface]\n    C --&gt; D[fr3_controllers]\n    C --&gt; E[franka_rim]\n\n    F[robot_arm_bringup] --&gt; C\n    F --&gt; D\n    F --&gt; E\n\n    G[isaac_sim_ros] --&gt; C\n\n    H[arm_interfaces] --&gt; B\n    H --&gt; C\n    H --&gt; D</code></pre>"},{"location":"packages/robot-arm/#quick-start","title":"Quick Start","text":""},{"location":"packages/robot-arm/#simulation-mode","title":"Simulation Mode","text":"<p>Launch robot arm in simulation:</p> <pre><code># Start Gazebo simulation\nros2 launch robot_arm_bringup gazebo.launch.py\n\n# Control via interface\nros2 run robot_arm_client example_client.py\n</code></pre>"},{"location":"packages/robot-arm/#hardware-mode","title":"Hardware Mode","text":"<p>Connect to real Franka FR3:</p> <pre><code># Launch hardware interface\nros2 launch robot_arm_bringup franka_hardware.launch.py robot_ip:=192.168.1.100\n\n# Run safety checks\nros2 service call /robot_arm_controller/check_safety std_srvs/srv/Trigger\n</code></pre>"},{"location":"packages/robot-arm/#key-features","title":"Key Features","text":""},{"location":"packages/robot-arm/#safety-systems","title":"Safety Systems","text":"<ul> <li>Joint limit monitoring</li> <li>Collision detection</li> <li>Emergency stop functionality</li> <li>Velocity and acceleration limiting</li> </ul>"},{"location":"packages/robot-arm/#control-modes","title":"Control Modes","text":"<ul> <li>Joint Control: Direct joint position/velocity control</li> <li>Cartesian Control: End-effector pose control</li> <li>Impedance Control: Compliant interaction control</li> <li>Trajectory Following: Smooth trajectory execution</li> </ul>"},{"location":"packages/robot-arm/#simulation-support","title":"Simulation Support","text":"<ul> <li>Gazebo integration</li> <li>Isaac Sim support</li> <li>Hardware-in-the-loop testing</li> <li>Configurable physics parameters</li> </ul>"},{"location":"packages/robot-arm/#configuration","title":"Configuration","text":""},{"location":"packages/robot-arm/#robot-parameters","title":"Robot Parameters","text":"<p>Key configuration files in <code>robot_arm_bringup/config/</code>:</p> <ul> <li><code>robot_description.yaml</code>: Robot model parameters</li> <li><code>controllers.yaml</code>: Controller configurations</li> <li><code>safety_limits.yaml</code>: Safety parameter definitions</li> </ul>"},{"location":"packages/robot-arm/#example-controller-configuration","title":"Example Controller Configuration","text":"<pre><code>joint_trajectory_controller:\n  type: joint_trajectory_controller/JointTrajectoryController\n  joints:\n    - joint_1\n    - joint_2\n    - joint_3\n    - joint_4\n    - joint_5\n    - joint_6\n    - joint_7\n  command_interfaces:\n    - position\n  state_interfaces:\n    - position\n    - velocity\n  constraints:\n    goal_time: 0.5\n    joint_1: {trajectory: 0.05, goal: 0.02}\n    joint_2: {trajectory: 0.05, goal: 0.02}\n</code></pre>"},{"location":"packages/robot-arm/#api-reference","title":"API Reference","text":"<p>For detailed API documentation, see:</p> <ul> <li>Robot Arm Interface</li> <li>Robot Arm Client</li> <li>FR3 Controllers</li> </ul>"},{"location":"packages/robot-arm/#tutorials","title":"Tutorials","text":"<ul> <li>Basic Robot Control</li> <li>Custom Controller Development</li> <li>Hardware Integration</li> </ul>"},{"location":"packages/robot-arm/#dependencies","title":"Dependencies","text":""},{"location":"packages/robot-arm/#system-dependencies","title":"System Dependencies","text":"<ul> <li>ROS2 Humble: Core ROS2 functionality</li> <li>Gazebo: Simulation environment</li> <li>MoveIt2: Motion planning framework</li> <li>ros2_control: Real-time control framework</li> </ul>"},{"location":"packages/robot-arm/#hardware-dependencies","title":"Hardware Dependencies","text":"<ul> <li>libfranka: Franka robot interface library</li> <li>Real-time Kernel: For hardware control (recommended)</li> </ul>"},{"location":"packages/robot-arm/#troubleshooting","title":"Troubleshooting","text":""},{"location":"packages/robot-arm/#common-issues","title":"Common Issues","text":"<p>Robot not responding to commands - Check that controllers are loaded: <code>ros2 control list_controllers</code> - Verify robot state: <code>ros2 topic echo /robot_state</code></p> <p>Simulation crashes on startup - Ensure Gazebo is properly installed - Check graphics drivers for GPU acceleration</p> <p>Hardware connection fails - Verify network connection to robot - Check robot IP address configuration - Ensure user permissions for real-time scheduling</p>"},{"location":"packages/robot-arm/#contributing","title":"Contributing","text":"<p>Each sub-package has its own development considerations:</p> <ul> <li>C++ packages: Follow ROS2 C++ style guidelines</li> <li>Python packages: Use type hints and docstrings</li> <li>Interface packages: Maintain backward compatibility</li> </ul> <p>See the contributing guide for detailed guidelines.</p>"},{"location":"packages/robot-arm/#license","title":"License","text":"<p>Licensed under the terms specified in individual package LICENSE files.</p>"},{"location":"packages/robot-tasks/","title":"Robot Tasks","text":"<p>Task execution framework with reinforcement learning capabilities for robot automation.</p>"},{"location":"packages/robot-tasks/#overview","title":"Overview","text":"<p>The Robot Tasks package provides a comprehensive framework for defining, executing, and learning robotic tasks. It integrates reinforcement learning (RL) capabilities with traditional task execution, enabling robots to learn and improve their performance over time.</p>"},{"location":"packages/robot-tasks/#key-features","title":"Key Features","text":"<ul> <li>Task Framework: Modular task definition and execution system</li> <li>RL Integration: Support for various reinforcement learning algorithms</li> <li>Training Pipeline: Complete training and evaluation infrastructure</li> <li>Agent Management: Trained agent deployment and monitoring</li> <li>Mock Environment: Testing and development without hardware</li> </ul>"},{"location":"packages/robot-tasks/#package-structure","title":"Package Structure","text":"<pre><code>robot_tasks/\n\u251c\u2500\u2500 robot_tasks/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 RLAgent.py              # RL agent implementations\n\u2502   \u251c\u2500\u2500 actions_*.csv           # Training data and action logs\n\u2502   \u251c\u2500\u2500 mock/                   # Mock environment for testing\n\u2502   \u251c\u2500\u2500 obs_test/              # Observation testing utilities\n\u2502   \u2514\u2500\u2500 rl_agent/              # RL algorithm implementations\n\u251c\u2500\u2500 agents/                     # Pre-trained agent models\n\u2502   \u251c\u2500\u2500 insert/                # Insertion task agents\n\u2502   \u2514\u2500\u2500 lift/                  # Lifting task agents\n\u251c\u2500\u2500 scripts/                   # Executable scripts\n\u2502   \u251c\u2500\u2500 fr3_insert.py          # Insertion task script\n\u2502   \u2514\u2500\u2500 ...                    # Other task scripts\n\u251c\u2500\u2500 rviz/                      # RViz visualization configs\n\u2514\u2500\u2500 test/                      # Unit tests\n</code></pre>"},{"location":"packages/robot-tasks/#supported-tasks","title":"Supported Tasks","text":""},{"location":"packages/robot-tasks/#lift-task","title":"Lift Task","text":"<p>Pick and place operations with objects.</p> <ul> <li>Objective: Lift objects from surface to target height</li> <li>Observations: Object pose, gripper state, joint positions</li> <li>Actions: Joint velocities, gripper commands</li> <li>Rewards: Task completion, efficiency, safety</li> </ul>"},{"location":"packages/robot-tasks/#insert-task","title":"Insert Task","text":"<p>Precise insertion operations requiring fine motor control.</p> <ul> <li>Objective: Insert objects into tight-fitting receptacles</li> <li>Observations: Force/torque feedback, visual feedback, pose estimation</li> <li>Actions: Compliant motion commands</li> <li>Rewards: Successful insertion, minimal force, alignment</li> </ul>"},{"location":"packages/robot-tasks/#rl-framework","title":"RL Framework","text":""},{"location":"packages/robot-tasks/#supported-algorithms","title":"Supported Algorithms","text":"<ul> <li>PPO (Proximal Policy Optimization): Stable policy gradient method</li> <li>SAC (Soft Actor-Critic): Sample-efficient off-policy algorithm</li> <li>Custom Algorithms: Framework for implementing new methods</li> </ul>"},{"location":"packages/robot-tasks/#training-environment","title":"Training Environment","text":"<p>The package provides a standardized environment interface compatible with popular RL libraries:</p> <pre><code>from robot_tasks.environments import LiftEnvironment\n\n# Create training environment\nenv = LiftEnvironment(\n    robot_interface=robot_arm_interface,\n    task_config={\n        'objects': ['cube', 'cylinder'],\n        'target_height': 0.2,\n        'success_threshold': 0.05\n    }\n)\n\n# Train agent\nfrom robot_tasks.rl_agent import PPOAgent\nagent = PPOAgent(env)\nagent.train(total_timesteps=100000)\n</code></pre>"},{"location":"packages/robot-tasks/#quick-start","title":"Quick Start","text":""},{"location":"packages/robot-tasks/#running-pre-trained-agents","title":"Running Pre-trained Agents","text":"<pre><code># Launch task environment\nros2 launch robot_tasks lift_task.launch.py\n\n# Run trained lifting agent\nros2 run robot_tasks run_trained_agent.py --task=lift --model=agents/lift/model_v2.pth\n\n# Monitor performance\nros2 topic echo /task_manager/performance_metrics\n</code></pre>"},{"location":"packages/robot-tasks/#training-new-agents","title":"Training New Agents","text":"<pre><code># Start training environment\nros2 launch robot_tasks training_env.launch.py task:=lift\n\n# Begin training (in separate terminal)\npython3 src/robot_tasks/scripts/train_lift_agent.py --config=config/lift_training.yaml\n</code></pre>"},{"location":"packages/robot-tasks/#mock-environment-testing","title":"Mock Environment Testing","text":"<p>For development without hardware:</p> <pre><code># Launch mock environment\nros2 launch robot_tasks mock_env.launch.py\n\n# Test task execution\npython3 src/robot_tasks/robot_tasks/mock/test_task.py\n</code></pre>"},{"location":"packages/robot-tasks/#configuration","title":"Configuration","text":""},{"location":"packages/robot-tasks/#task-configuration","title":"Task Configuration","text":"<p>Tasks are configured via YAML files in the <code>config/</code> directory:</p> <pre><code># lift_task.yaml\ntask:\n  name: \"lift_object\"\n  type: \"manipulation\"\n\nenvironment:\n  objects:\n    - type: \"cube\"\n      size: [0.05, 0.05, 0.05]\n      mass: 0.1\n    - type: \"cylinder\"\n      radius: 0.03\n      height: 0.08\n      mass: 0.15\n\n  workspace:\n    x_range: [0.3, 0.7]\n    y_range: [-0.3, 0.3]\n    z_range: [0.0, 0.5]\n\ntraining:\n  algorithm: \"PPO\"\n  total_timesteps: 1000000\n  learning_rate: 3e-4\n  batch_size: 64\n\nrewards:\n  success: 100.0\n  collision: -50.0\n  timeout: -10.0\n  distance_to_target: -1.0\n</code></pre>"},{"location":"packages/robot-tasks/#rl-algorithm-configuration","title":"RL Algorithm Configuration","text":"<pre><code># ppo_config.yaml\nalgorithm: \"PPO\"\nhyperparameters:\n  learning_rate: 3e-4\n  n_steps: 2048\n  batch_size: 64\n  n_epochs: 10\n  gamma: 0.99\n  gae_lambda: 0.95\n  clip_range: 0.2\n  ent_coef: 0.01\n  vf_coef: 0.5\n</code></pre>"},{"location":"packages/robot-tasks/#api-reference","title":"API Reference","text":""},{"location":"packages/robot-tasks/#core-classes","title":"Core Classes","text":""},{"location":"packages/robot-tasks/#taskexecutor","title":"TaskExecutor","text":"<p>Main class for task execution and management.</p> <pre><code>from robot_tasks.task_executor import TaskExecutor\n\nexecutor = TaskExecutor()\nsuccess = executor.execute_task(task_name, task_config)\n</code></pre>"},{"location":"packages/robot-tasks/#rlagent","title":"RLAgent","text":"<p>Base class for reinforcement learning agents.</p> <pre><code>from robot_tasks.RLAgent import RLAgent\n\nagent = RLAgent.load(\"path/to/model.pth\")\naction = agent.predict(observation)\n</code></pre>"},{"location":"packages/robot-tasks/#environment-interface","title":"Environment Interface","text":"<p>All task environments implement a common interface:</p> <pre><code>class TaskEnvironment:\n    def reset(self) -&gt; np.ndarray:\n        \"\"\"Reset environment and return initial observation.\"\"\"\n        pass\n\n    def step(self, action: np.ndarray) -&gt; Tuple[np.ndarray, float, bool, dict]:\n        \"\"\"Execute action and return (obs, reward, done, info).\"\"\"\n        pass\n\n    def render(self, mode: str = 'human') -&gt; None:\n        \"\"\"Render the environment.\"\"\"\n        pass\n</code></pre>"},{"location":"packages/robot-tasks/#data-collection","title":"Data Collection","text":""},{"location":"packages/robot-tasks/#training-data-format","title":"Training Data Format","text":"<p>Training actions and observations are logged in CSV format:</p> <pre><code>timestamp,joint_1,joint_2,joint_3,joint_4,joint_5,joint_6,joint_7,gripper,reward\n1620000000.123,0.1,-0.5,0.8,-1.2,0.3,1.5,0.7,0.02,5.5\n</code></pre>"},{"location":"packages/robot-tasks/#performance-metrics","title":"Performance Metrics","text":"<pre><code># Performance tracking\nmetrics = {\n    'success_rate': 0.85,\n    'average_reward': 45.3,\n    'episode_length': 150.2,\n    'collision_rate': 0.02\n}\n</code></pre>"},{"location":"packages/robot-tasks/#integration-with-robot-arm","title":"Integration with Robot Arm","text":"<p>The package integrates seamlessly with the robot arm system:</p> <pre><code>from robot_arm_interface import RobotArmInterface\nfrom robot_tasks.environments import LiftEnvironment\n\n# Connect to robot\nrobot = RobotArmInterface()\nawait robot.connect()\n\n# Create task environment with real robot\nenv = LiftEnvironment(robot_interface=robot, use_real_robot=True)\n\n# Execute trained policy\nagent = RLAgent.load(\"trained_model.pth\")\nobs = env.reset()\ndone = False\n\nwhile not done:\n    action = agent.predict(obs)\n    obs, reward, done, info = env.step(action)\n</code></pre>"},{"location":"packages/robot-tasks/#monitoring-and-visualization","title":"Monitoring and Visualization","text":""},{"location":"packages/robot-tasks/#rviz-integration","title":"RViz Integration","text":"<p>Task execution can be visualized in RViz:</p> <pre><code># Launch with visualization\nros2 launch robot_tasks lift_task.launch.py use_rviz:=true\n\n# Load task-specific RViz config\nrviz2 -d src/robot_tasks/rviz/lift_env.rviz\n</code></pre>"},{"location":"packages/robot-tasks/#performance-dashboard","title":"Performance Dashboard","text":"<p>Monitor training progress and agent performance:</p> <pre><code># Launch monitoring dashboard\nros2 run robot_tasks performance_monitor.py --port=8080\n\n# View at http://localhost:8080\n</code></pre>"},{"location":"packages/robot-tasks/#extending-the-framework","title":"Extending the Framework","text":""},{"location":"packages/robot-tasks/#adding-new-tasks","title":"Adding New Tasks","text":"<ol> <li> <p>Define Task Environment: <pre><code>from robot_tasks.base_environment import BaseTaskEnvironment\n\nclass MyTaskEnvironment(BaseTaskEnvironment):\n    def __init__(self, config):\n        super().__init__(config)\n        # Task-specific initialization\n\n    def _compute_reward(self, obs, action, next_obs):\n        # Implement reward function\n        pass\n</code></pre></p> </li> <li> <p>Create Configuration: <pre><code># my_task_config.yaml\ntask:\n  name: \"my_task\"\n  observation_space: \"continuous\"\n  action_space: \"continuous\"\n</code></pre></p> </li> <li> <p>Register Task: <pre><code>from robot_tasks.task_registry import register_task\nregister_task(\"my_task\", MyTaskEnvironment)\n</code></pre></p> </li> </ol>"},{"location":"packages/robot-tasks/#testing","title":"Testing","text":""},{"location":"packages/robot-tasks/#unit-tests","title":"Unit Tests","text":"<pre><code># Run all tests\ncolcon test --packages-select robot_tasks\n\n# Run specific test\npython3 -m pytest test/test_rl_agent.py -v\n</code></pre>"},{"location":"packages/robot-tasks/#integration-tests","title":"Integration Tests","text":"<pre><code># Test with mock environment\npython3 test/integration/test_mock_environment.py\n\n# Test with simulation\nros2 launch robot_tasks test_integration.launch.py\n</code></pre>"},{"location":"packages/robot-tasks/#performance-optimization","title":"Performance Optimization","text":""},{"location":"packages/robot-tasks/#training-acceleration","title":"Training Acceleration","text":"<ul> <li>GPU Support: Automatic GPU detection and usage</li> <li>Vectorized Environments: Parallel environment execution</li> <li>Experience Replay: Efficient data reuse</li> </ul>"},{"location":"packages/robot-tasks/#deployment-optimization","title":"Deployment Optimization","text":"<ul> <li>Model Compression: Reduce model size for deployment</li> <li>Inference Optimization: Fast action computation</li> <li>Memory Management: Efficient resource usage</li> </ul>"},{"location":"packages/robot-tasks/#troubleshooting","title":"Troubleshooting","text":""},{"location":"packages/robot-tasks/#common-training-issues","title":"Common Training Issues","text":"<p>Training not converging - Check reward function design - Adjust hyperparameters - Verify environment reset logic</p> <p>High collision rates - Increase safety margins - Improve observation space - Add collision penalties</p> <p>Slow training - Use GPU if available - Increase batch size - Optimize environment code</p>"},{"location":"packages/robot-tasks/#contributing","title":"Contributing","text":"<p>When contributing to the robot tasks framework:</p> <ul> <li>Follow the task environment interface</li> <li>Include comprehensive tests</li> <li>Document reward function design</li> <li>Provide example configurations</li> </ul> <p>See the contributing guide for detailed guidelines.</p>"},{"location":"packages/robot-tasks/#license","title":"License","text":"<p>Licensed under the same terms as the main ADG ROS2 project.</p>"},{"location":"packages/teleop/","title":"Teleop","text":"<p>Remote robot control and teleoperation system with multiple interface options.</p>"},{"location":"packages/teleop/#packages","title":"Packages","text":""},{"location":"packages/teleop/#teleop_1","title":"<code>teleop</code>","text":"<p>Main package. Teleoperation nodes (to process device inputs) and launch files</p>"},{"location":"packages/teleop/#launch-files","title":"Launch Files","text":""},{"location":"packages/teleop/#nodes","title":"Nodes","text":"<ul> <li>i3_teleop_virtual_coupling; To control the robot through a virtual spring between with the I3</li> </ul> <p>To be tested/updated</p> <ul> <li>Gamepad:</li> <li>i3_teleop_position</li> <li>i3_teleop</li> <li>joy_teleop</li> </ul>"},{"location":"packages/teleop/#i3_teleop_virtual_coupling","title":"i3_teleop_virtual_coupling","text":""},{"location":"packages/teleop/#devices","title":"Devices","text":""},{"location":"packages/teleop/#inverse3_ros2","title":"<code>inverse3_ros2</code>","text":"<p>ROS2 wrapper for the inverse3 device by Haply. Communicates with the device through the web socket.</p> <p>Publishes the current pose and twist of the Inverse 3. The pose is relative to the workspace centre. </p> <p>Parameters TODO: Change to link to .yaml param file when it's implemented</p> <ul> <li>i3_pose_topic_name: Name of the pose topic (Default: '/i3/pose')</li> <li>i3_twist_topic_name: Name of the twist topic (Default: '/i3/twist')</li> <li>i3_wrench_topic_name: Name of the desired wrench topic (Default: '/i3/wrench')</li> <li>workspace_centre: Absolute coordinate of the workspace centre. </li> <li>frequency: Publish frequency (Default: 1000.0)</li> </ul> <p>Topics</p> <ul> <li>/i3/pose [PoseStamped]</li> <li>/i3/twist [TwistStamped]</li> </ul> <p>Subscriptions</p> <ul> <li>/i3/wrench [WrenchStamped]</li> </ul>"},{"location":"packages/teleop/#network_sim","title":"<code>network_sim</code>","text":"<p>5G and fixed network simulation.</p> <ul> <li>Purpose: Network latency simulation and communication testing</li> <li>Language: Python  </li> <li>Key Features: Latency injection</li> </ul>"},{"location":"packages/teleop/#teleop_interfaces","title":"<code>teleop_interfaces</code>","text":"<p>Message and service definitions for teleoperation.</p> <ul> <li>Purpose: Custom ROS2 interfaces for teleop commands</li> <li>Language: ROS2 Interface Definition Language</li> <li>Key Features: Command messages, status feedback, configuration services</li> </ul>"},{"location":"packages/teleop/#quick-start","title":"Quick Start","text":""},{"location":"packages/teleop/#inverse3","title":"Inverse3","text":"<p>TODO </p>"},{"location":"packages/teleop/#gamepad","title":"Gamepad","text":"<p>TODO</p>"},{"location":"packages/teleop/#network-simulation","title":"Network Simulation","text":"<p>You can add delays between messages using... </p> <p>Add this to your launch file <pre><code>...\n</code></pre></p>"},{"location":"user-guide/delay-rim/","title":"DelayRIM","text":"<p>Instruction on how to use the DelayRIM package</p>"},{"location":"user-guide/delay-rim/#launching","title":"Launching","text":"<ol> <li>Start Foxglove <pre><code>foxglove # or without the alias: ros2 launch foxglove_bridge foxglove_bridge_launch.xml\n</code></pre></li> </ol>"},{"location":"user-guide/delay-rim/#real-robot","title":"Real Robot","text":"<ol> <li> <p>Start the server on the Franka PC <pre><code>cd ...\ndocker compose up launch-franka\n</code></pre></p> </li> <li> <p>Start the I3 node <pre><code>ros2 run inverse3_ros2 inverse3_node\n# OR w/o force feedback\nros2 run inverse3_ros2 inverse3_node --ros-args --param disable_forces:=true\n</code></pre></p> </li> <li> <p>Launch delay rim <pre><code>ros2 launch franka_rim franka_rim.launch.py config_file:=fr3_sim_config.yaml fake_i3:=false save_data:=false\n</code></pre></p> </li> </ol>"},{"location":"user-guide/delay-rim/#sim","title":"Sim","text":"<p>To replay bag data</p> <ol> <li> <p>Launch the DelayRIM nodes <pre><code>ros2 launch franka_rim franka_rim.launch.py config_file:=fr3_sim_config.yaml fake_i3:=false save_data:=false\n</code></pre></p> </li> <li> <p>Replay the data <pre><code>python src/robot_arm/franka_rim/scripts/replay_analysis.py &lt;file_id&gt;\n</code></pre></p> </li> </ol>"},{"location":"user-guide/delay-rim/#nodes","title":"Nodes","text":"<p>Todo</p> <p>THIS SHOULD COME FROM THE FILES</p>"},{"location":"user-guide/delay-rim/#franka_model_node","title":"<code>franka_model_node</code>","text":"<p>To compute the model of the franka</p> <p>Input: state of the robot</p> <p>Output: /fr3_model [FrankaModel]</p>"},{"location":"user-guide/delay-rim/#franka_rim_node","title":"<code>franka_rim_node</code>","text":"<p>File: </p> <p>To compute the RIM of the Model message</p> <p>Input: /fr3_model Out: /fr3_rim</p>"},{"location":"user-guide/delay-rim/#delay_rim_node","title":"<code>delay_rim_node</code>","text":"<p>Compute the target_pose and interaction forces from the history of the I3 states and </p> <p>In: I3 state, rim Out: target_pose, i3_wrench</p>"},{"location":"user-guide/experiments/","title":"Experiments","text":"<p>How to save data and process experiments.</p> <p>By experiment, we mean tests that aim at comparing different responses when the input is the same. </p>"},{"location":"user-guide/experiments/#for-a-new-experiment","title":"For a new Experiment","text":"<ol> <li> <p>Run experiment with bag data recording Example of launch file configuration <pre><code>    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    bag_filename = f\"franka_rim_data_{timestamp}\"\n    bag_filepath = Path(\"data\") / bag_filename  # Store in data directory\n\n    # Define topics to record (add/remove as needed)\n    topics_to_record = [\n        \"/fr3/current_pose\",\n        \"/fr3_rim\",\n        ...\n    ]\n    bag_record_node = ExecuteProcess(\n        cmd=[\n            \"ros2\",\n            \"bag\",\n            \"record\",\n            *topics_to_record,\n            \"--output\",\n            bag_filepath.as_posix(),\n            \"--storage\",\n            \"sqlite3\",\n            \"--max-bag-size\",\n            \"0\",  # No size limit\n        ],\n        output=\"screen\",\n        condition=IfCondition(LaunchConfiguration(\"save_data\")),\n    )\n</code></pre></p> </li> <li> <p>Define your experiment configuration in <code>config/experiment_configs</code> <pre><code>my_experiment:\n  experiments:  # List of bag files recorded for this experiment\n  - franka_rim_data_20250911_145004\n  output_filename: my_experiment_processed.pkl\n  topics:  # For each value here, will extract the topic to a dataframe\n    fr3_joint_states: /fr3/joint_states\n    fr3_pose: /fr3/current_pose\n    haptic_pose: /haptic_pose\n    rim_force: /rim/interface_force\n    rim_pose: /rim/pose\n</code></pre></p> </li> <li> <p>Run the processing script This will extract a dataframe for all the experiments you specified <pre><code>python scripts/bag_data_processing.py --config-file config/experiment_configs.yaml --config int_force_free_space\n</code></pre></p> </li> <li> <p>Plot and analyze your data See the <code>scripts/rim_data_analysis</code> for an example on how to load the dataframes and plot them.</p> </li> </ol>"},{"location":"user-guide/experiments/#experiment-python-package","title":"Experiment python package","text":"<p>See issue #28</p>"},{"location":"user-guide/franka-server/","title":"Franka Server","text":"<p>The Franka Server consists of group of ROS2 nodes sending the low level torque commands to the Franka Controller.  The main component is the ros2 controller.</p> <p>Resources</p> <ul> <li>franka-server: GitHub Repo</li> <li>IsaacSim Documentation</li> <li>IsaacSim API</li> </ul> <p>The following steps assume you have access to the shell and files of the FrankaPC, either directly or via ssh.</p>"},{"location":"user-guide/franka-server/#testing-libfranka","title":"Testing <code>libfranka</code>","text":"<p>Libfranka is the low level c++ api to send commands to the robot.  Test that you are able to connect to the robot: <pre><code>cd ~/git/libfranka/build\n./examples/echo_robot_state $FR3_IP\n</code></pre></p> <p>To check the realtime is working: <pre><code># This moves the robot home\n./examples/communication_test $FR3_IP\n</code></pre></p> <p>Other examples are available. You can take a look with  <pre><code>ls examples\n</code></pre></p>"},{"location":"user-guide/franka-server/#starting-the-server","title":"Starting the Server","text":"<ol> <li>Launch the server</li> </ol> <pre><code>fr3-launch\n# Alias for: ros2 launch franka_server franka.launch.py robot_ip:=$FR3_IP\n</code></pre> <p>Todo</p> <p>Launch with Docker (create the .env file, docker up ...) (when we get the new PC)</p> <p>This starts the ros2 controller (osc_pd_controller by default) and the franka_hand_server. </p> <ol> <li> <p>Should be in impedance mode, you can try pushing it around you you'll feel the force of the 'control spring'</p> </li> <li> <p>You can look at the available topics and robot information     <pre><code>ros2 topic list\nros2 topic echo /f3/...\n</code></pre></p> <p>Communication Constraints</p> <p>When too many packets to the controller are dropped, the server is shut down.. just restart it!</p> </li> <li> <p>You can directly send position commands with:</p> <pre><code>ros2 topic pub --once /osc_pd_controller/goal geometry_msgs/msg/PointStamped \"{position: {x: 0.3085, y: 0.0, z: 0.4854}}\"\n</code></pre> <p>Tip</p> <p>Big position steps Watch out sending big position steps, the gains are set pretty high. Safeties will shut it down though if the joint velocities/torques, end-effector position or even contact forces reach certain threshold</p> </li> <li> <p>We provide a few utilities scripts to move the robot</p> <p>Todo</p> <p>Add scripts and how to start them</p> <ul> <li>Move with RVIZ    </li> <li>Go Home</li> <li>Change Controller</li> <li>Set collision behaviour</li> <li>Gripper</li> </ul> </li> </ol>"},{"location":"user-guide/franka-server/#accessing-the-source-code","title":"Accessing the Source Code","text":"<p>To modify/read the source code, we recommend using  remote development using SSH VsCode functionality.</p> <p>This way, you can open, modify and build the code on the FrankaPC from your machine. </p>"},{"location":"user-guide/franka-server/#available-controllers","title":"Available Controllers","text":"<p>It's in the Franka Server that the low level controllers are implemented using  ros2 control.</p> <p>We also have the CRISP PY controllers. </p> <p>It's currently hard to modify add new controllers because of the desktop limitations. </p> <p>Todo</p> <p>Add available controllers, math, their configurations, ... to the franka-server package doc</p>"},{"location":"user-guide/franka-server/#simulation-setup","title":"Simulation Setup","text":"<p>Eventually, it would be nice to have a simulated environment of the arm in IsaacSim</p> <ol> <li>Install Isaac Sim ...</li> </ol>"},{"location":"user-guide/getting-started/","title":"Getting Started","text":"<p>This guide will help you get up and running with the ADG ROS2 packages and basic functionalities of the Franka Arm. </p> <p>Glossary</p> <ul> <li>Franka Control / Controller: Black Box on the table</li> <li>Franka PC / Desktop: Franka PC on the ground</li> <li>Franka Desk: Web app to control the robot</li> <li>FR3-server: Set of ros2 nodes to publish the robot states and send position commands. Running on the Franka PC.</li> </ul> <p>General Info</p> <p> Model: Franka Research 3</p> <p>IPs</p> <ul> <li>Controller IP: 10.69.54.223</li> <li>Franka Desktop: 10.69.54.222</li> </ul> <p>ROS2</p> <ul> <li>ROS2 Version: humble</li> <li>Domain: 01</li> </ul> <p>Note</p> <p>Useful Resources</p> <ul> <li>Documents</li> <li>Datasheet</li> <li>Product manual</li> <li>Franka hand </li> <li>FCI Documentation</li> <li>FCI API Doc (c++)</li> <li>DH Parameters</li> <li>FR3 Limits</li> </ul>"},{"location":"user-guide/getting-started/#network-setup","title":"Network Setup","text":"Network Setup"},{"location":"user-guide/getting-started/#1-robot-startup","title":"1. Robot Startup","text":"<ol> <li> <p>Power on the Franka Controller</p> </li> <li> <p>Open Franka Desk</p> <ul> <li> <p>You have two options: on the Franka PC or via SSH (recommended)</p> </li> <li> <p>On the Franka PC</p> <ul> <li>Open a session using the monitor connected to the PC<ul> <li>User: csirois, pwd: FrankaPC2024</li> </ul> </li> <li>In a browser, go to 10.69.54.223</li> </ul> </li> <li>Using SSH on your laptop<ul> <li>Follow the ssh setup user guide</li> <li>SSH to the FrankaPC with the tunnelling option <pre><code>ssh franka-pc\n</code></pre></li> <li>In your browser, open desk https://localhost:8443/desk/</li> </ul> </li> </ul> </li> <li> <p>Unlock the joints</p> </li> <li> <p>Activate FCI</p> </li> </ol>"},{"location":"user-guide/getting-started/#2-franka-server","title":"2. Franka Server","text":"<p>See Franka Server User Guide for a comprehensive guides on the Franka Server  functionalities.</p>"},{"location":"user-guide/getting-started/#3-using-the-client-adl-ros2-packages","title":"3. Using the Client (ADL ROS2 Packages)","text":"<p>The ADL ROS2 packages provide various way for controlling the FR3. The easiest is to use the <code>arm_client</code>, a wrapper around the ROS2 functionalities to directly specify robot motion. </p> <p>For the following steps, we assume the server is running and you have the ADL ROS2 packages installed. </p> <p>Todo</p> <p>Project structure</p>"},{"location":"user-guide/getting-started/#arm-client-python-scripting","title":"Arm Client - Python Scripting","text":"<p>Look at the <code>scripts</code> folder of the  arm_client for examples of commands you can send. </p> <p>You can send the robot home with:  <pre><code>python src/arm_client/scripts/00_home.py\n</code></pre></p>"},{"location":"user-guide/getting-started/#teleoperation","title":"Teleoperation","text":"<p>Teleoperation of the arm... </p>"},{"location":"user-guide/getting-started/#robot-tasks","title":"Robot Tasks","text":"<p>To run RL agents ...</p>"},{"location":"user-guide/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference for detailed documentation</li> <li>Check out the Tutorials for step-by-step examples</li> <li>Review the Developer Guide if you want to contribute</li> </ul>"},{"location":"user-guide/installation/","title":"Installation","text":"<p>Detailed installation instructions for setting up the Franka arm and the ADL ROS2 packages. Step 1 and 2 shouldn't really be needed now that everything is setup...</p> <p>This just on how to get everything ready, see getting started for instructions on how to use the different parts of the project.</p>"},{"location":"user-guide/installation/#1-franka-research-3","title":"1. Franka Research 3","text":"<p>Installation of the Franka Research 3</p>"},{"location":"user-guide/installation/#2-franka-pc","title":"2. Franka PC","text":"<p>System Requirements</p> <p> Operating System</p> <ul> <li>Real-time Ubuntu 22.04 LTS (Recommended)</li> </ul> <p>Software Dependencies</p> <ul> <li>Docker </li> </ul> <p>Steps to setup the Franka PC.</p> <ul> <li>Ubuntu 22.04</li> <li>Docker</li> <li>IP</li> <li>Ping FR3</li> <li>Franka Server</li> <li>Test libfranka</li> <li>Test server</li> </ul>"},{"location":"user-guide/installation/#3-adl-ros-2","title":"3. ADL ROS 2","text":"<p>System Requirements</p> <p> Operating System</p> <ul> <li>Ubuntu 22.04 LTS (Recommended)</li> </ul> <p>Software Dependencies</p> <ul> <li>Docker </li> </ul> <p>How to setup the client packages to control the robot arm via ROS2, Python, or Matlab. </p> <ol> <li> <p>Install Docker</p> <ul> <li>Instructions</li> <li>Make sure to also perform the post-installation steps </li> </ul> </li> <li> <p>Clone the repo <pre><code>git clone git@github.com:McGill-Applied-Dynamics-Lab/adl-ros2.git\n</code></pre> Because the repo is private (for now...), you will probably have to  setup ssh with github. </p> </li> <li> <p>Open the folder in VsCode </p> </li> <li> <p>Install the Vs Code Dev Containers extension (it's part of the remote development extension pack).</p> </li> <li> <p>Build and open in the devcontainer</p> <ul> <li><code>&gt;Dev Containers: Rebuild and Reopen in Container</code> (ctrl+shift+P to open the command palette)</li> <li>This takes a while as it clones the dependencies and builds the packages</li> </ul> </li> <li> <p>Test installation     <pre><code>python scripts/test_install.py\n</code></pre></p> </li> </ol>"},{"location":"user-guide/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Follow the Getting Started Guide</li> <li>Explore the Package Documentation</li> </ol>"}]}